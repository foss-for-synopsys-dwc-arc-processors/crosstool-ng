From 802c53730a75d855aa9aa3d42f47fc2b3e0d3cb6 Mon Sep 17 00:00:00 2001
From: Anton Kolesov <Anton.Kolesov@synopsys.com>
Date: Tue, 10 Apr 2018 18:24:43 +0300
Subject: [PATCH 11/20] arc: Ignore Metaware extension .cfa_info

This CFA operation is used by MetaWare compiler to specify functions that
are interrupt handlers. For the sake of simplicity GDB can just ignore this
extension.

See:
https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/issues/122

gdb/ChangeLog

yyyy-mm-dd  Anton Kolesov  <Anton.Kolesov@synopsys.com>

	* arc-tdep.c (arc_execute_dwarf_cfa_vendor_op): New functions.
	  (arc_gdbarch_init): Use it.

include/ChangeLog

yyyy-mm-dd  Anton Kolesov  <Anton.Kolesov@synopsys.com>

	* dwarf2.def (DW_CFA_ARC_info): New constant.

Original fix is: https://github.com/foss-for-synopsys-dwc-arc-processors/binutils-gdb/commit/ee4f024fa1dd257bae16b9d2dc4b1a6e3e21790b
Not [yet] upstreamable - fix for compatibility with ARC proprietary
MetaWare toolchain, see https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/issues/122
---
 gdb/arc-tdep.c     |   23 +++++++++++++++++++++++
 include/dwarf2.def |    3 +++
 2 files changed, 26 insertions(+)

--- a/gdb/arc-tdep.c
+++ b/gdb/arc-tdep.c
@@ -23,6 +23,8 @@
 #include "arch-utils.h"
 #include "elf-bfd.h"
 #include "disasm.h"
+#include "dwarf2.h"
+#include "dwarf2/expr.h"
 #include "dwarf2/frame.h"
 #include "frame-base.h"
 #include "frame-unwind.h"
@@ -1994,6 +1996,24 @@
   reggroup_add (gdbarch, restore_reggroup);
 }
 
+static bool
+arc_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,
+				 struct dwarf2_frame_state *fs,
+				 const gdb_byte **insn_ptr,
+				 const gdb_byte *insn_end)
+{
+  /* MetaWare extension emitted for _Interrupt functions.  Can be ignored by
+     the GDB.  See
+     https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/issues/122  */
+  if (op == DW_CFA_ARC_info)
+    {
+      *insn_ptr = safe_skip_leb128 (*insn_ptr, insn_end);
+      return true;
+    }
+
+  return false;
+}
+
 static enum arc_isa
 mach_type_to_arc_isa (const unsigned long mach)
 {
@@ -2407,6 +2427,9 @@
   frame_unwind_append_unwinder (gdbarch, &arc_frame_unwind);
   frame_base_set_default (gdbarch, &arc_normal_base);
 
+  set_gdbarch_execute_dwarf_cfa_vendor_op (gdbarch,
+					   arc_execute_dwarf_cfa_vendor_op);
+
   /* Setup stuff specific to a particular environment (baremetal or Linux).
      It can override functions set earlier.  */
   gdbarch_init_osabi (info, gdbarch);
--- a/include/dwarf2.def
+++ b/include/dwarf2.def
@@ -792,6 +792,9 @@
 DW_CFA (DW_CFA_GNU_args_size, 0x2e)
 DW_CFA (DW_CFA_GNU_negative_offset_extended, 0x2f)
 
+/* ARC specific */
+DW_CFA (DW_CFA_ARC_info, 0x34)
+
 DW_END_CFA
 
 /* Index attributes in the Abbreviations Table.  */
